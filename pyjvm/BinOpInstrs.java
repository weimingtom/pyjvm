// AUTOGENERATED by genops.py
package pyjvm;
public final class BinOpInstrs {

	public static final class Add extends GenericInstrs.BinOp {
		public Instr run(Frame frame) {
			Obj a = frame.reg[inreg1];
			Obj b = frame.reg[inreg0];
			Obj result = a.add(frame, b);
			if(result == NotImplemented) {
				result = b.radd(frame, a);
				if(result == NotImplemented)
					this.operatorFailed(a, b, "add");
			}
			frame.reg[outreg0] = result;
			return next;
		}
	}

	public static final class Sub extends GenericInstrs.BinOp {
		public Instr run(Frame frame) {
			Obj a = frame.reg[inreg1];
			Obj b = frame.reg[inreg0];
			Obj result = a.sub(frame, b);
			if(result == NotImplemented) {
				result = b.rsub(frame, a);
				if(result == NotImplemented)
					this.operatorFailed(a, b, "sub");
			}
			frame.reg[outreg0] = result;
			return next;
		}
	}

	public static final class Mul extends GenericInstrs.BinOp {
		public Instr run(Frame frame) {
			Obj a = frame.reg[inreg1];
			Obj b = frame.reg[inreg0];
			Obj result = a.mul(frame, b);
			if(result == NotImplemented) {
				result = b.rmul(frame, a);
				if(result == NotImplemented)
					this.operatorFailed(a, b, "mul");
			}
			frame.reg[outreg0] = result;
			return next;
		}
	}

	public static final class Floordiv extends GenericInstrs.BinOp {
		public Instr run(Frame frame) {
			Obj a = frame.reg[inreg1];
			Obj b = frame.reg[inreg0];
			Obj result = a.floordiv(frame, b);
			if(result == NotImplemented) {
				result = b.rfloordiv(frame, a);
				if(result == NotImplemented)
					this.operatorFailed(a, b, "floordiv");
			}
			frame.reg[outreg0] = result;
			return next;
		}
	}

	public static final class IsEqual extends GenericInstrs.BinOp {
		public Instr run(Frame frame) {
			Obj a = frame.reg[inreg1];
			Obj b = frame.reg[inreg0];
			Obj result = a.isEqual(frame, b);
			if(result == null) {
				result = b.isEqual(frame, a);
				if(result == null)
					this.operatorFailed(a, b, "==");
			}
			frame.reg[outreg0] = result;
			return next;
		}
	}

	public static final class Iadd extends GenericInstrs.BinOp {
		public Instr run(Frame frame) {
			Obj a = frame.reg[inreg1];
			Obj b = frame.reg[inreg0];
			Obj result = a.iadd(frame, b);
			if(result == NotImplemented) {
				result = b.radd(frame, a);
				if(result == NotImplemented)
					this.operatorFailed(a, b, "+=");
			}
			frame.reg[outreg0] = result;
			return next;
		}
	}

	public static final class Isub extends GenericInstrs.BinOp {
		public Instr run(Frame frame) {
			Obj a = frame.reg[inreg1];
			Obj b = frame.reg[inreg0];
			Obj result = a.isub(frame, b);
			if(result == NotImplemented) {
				result = b.rsub(frame, a);
				if(result == NotImplemented)
					this.operatorFailed(a, b, "-=");
			}
			frame.reg[outreg0] = result;
			return next;
		}
	}

	public static abstract class BinOpFactory extends Obj {
		public abstract GenericInstrs.BinOp create();
	}
	
	public static final StringDict binOpTypes = new StringDict();
	
	static {

		binOpTypes.put("add", new BinOpFactory(){
			public GenericInstrs.BinOp create() {
				return new Add();
			}
		});

		binOpTypes.put("sub", new BinOpFactory(){
			public GenericInstrs.BinOp create() {
				return new Sub();
			}
		});

		binOpTypes.put("mul", new BinOpFactory(){
			public GenericInstrs.BinOp create() {
				return new Mul();
			}
		});

		binOpTypes.put("floordiv", new BinOpFactory(){
			public GenericInstrs.BinOp create() {
				return new Floordiv();
			}
		});

		binOpTypes.put("==", new BinOpFactory(){
			public GenericInstrs.BinOp create() {
				return new IsEqual();
			}
		});

		binOpTypes.put("+=", new BinOpFactory(){
			public GenericInstrs.BinOp create() {
				return new Iadd();
			}
		});

		binOpTypes.put("-=", new BinOpFactory(){
			public GenericInstrs.BinOp create() {
				return new Isub();
			}
		});

	}
}
